#include "rti/rti_literature.h"
#include "librarymodel.h"
#include <QColor>
#include <QFont>

LibraryModel::LibraryModel(rti_literature *library)
{
    library_ = library;
}


//
// Public Methods
//
void LibraryModel::setLibrary(rti_literature *library)
{
    emit layoutAboutToBeChanged();
    library_ = library;
    emit layoutChanged();
}

int LibraryModel::rowCount(const QModelIndex &/*parent*/) const
{
    return library_ != NULL ? library_->size() : 0;
}

int LibraryModel::columnCount(const QModelIndex &/*parent*/) const
{
    return 5;
}

QVariant LibraryModel::data(const QModelIndex &index, int role) const
{
    if (library_ == NULL || !index.isValid())
        return QVariant();

    // Color and italicize editable columns.
    if (role == Qt::TextColorRole)
        return QColor(Qt::blue);
    if (role == Qt::FontRole)
    {
        QFont font;
        font.setItalic(true);
        return font;
    }

    if (role == Qt::CheckStateRole)
        if (index.column() == 0)
            return Qt::Checked;

    rti_book_sptr book = (*library_)[index.row()];
    if (role == Qt::DisplayRole || role == Qt::EditRole)
    {
        switch (index.column())
        {
            case 1:
                return QString::fromStdString(book->isbn());
            case 2:
                return QString::fromStdString(book->title());
            case 3:
                return QString::fromStdString(book->author());
            case 4:
                //TODO
                return gradeLevelQString::number(book->age_range());
            default:
                return QVariant();
        }
    }
    return QVariant();
}

QVariant LibraryModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (role != Qt::DisplayRole)
        return QVariant();

    if (orientation == Qt::Horizontal)
    {
        switch (section)
        {
            case 1:
                return tr("ISBN");
            case 2:
                return tr("Title");
            case 3:
                return tr("Author");
            case 4:
                return tr("Grade Level");
            default:
                return QVariant();
        }
    }
    else
    {
        return section + 1;
    }

    return QVariant();
}

bool LibraryModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (library_ == NULL
            || !index.isValid()
            || index.row() > library_->size()
            || role != Qt::EditRole)
        return false;

    switch (index.column())
    {
        case 1:
            (*library_)[index.row()]->set_isbn(value.toString().toStdString());
            return true;
        case 2:
            (*library_)[index.row()]->set_title(value.toString().toStdString());
            return true;
        case 3:
            (*library_)[index.row()]->set_author(value.toString().toStdString());
            return true;
        case 4:
            // TODO
            //(*library_)[index.row()]->set_age_range(value.toString().toStdString());
            return true;
    }

    return false;
}

Qt::ItemFlags LibraryModel::flags(const QModelIndex &index) const
{
    if (!index.isValid())
        return 0;
    if (index.column() == 0)
        return Qt::ItemIsUserCheckable | Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsEditable | QAbstractItemModel::flags(index);
    return Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsEditable | QAbstractItemModel::flags(index);
}



